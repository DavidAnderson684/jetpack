/* global wp, jp_data, jQuery */

(function( $, modules, currentVersion, jp_data ) {

	///////////////////////////////////////
	// INIT
	///////////////////////////////////////

	var data;

	$( document ).ready(function () {

		data = {
			'adminNonce' : jp_data.admin_nonce
		};

		initEvents();
		loadAllTabs();
		adminAJAX();
	});

	///////////////////////////////////////
	// FUNCTIONS
	///////////////////////////////////////

	function initEvents () {
		/*
		 We are listening to see if we need to refresh the data.
		 We'd need to refresh the data only if the page is navigated to
		 via the back or forward browser buttons.  We do this so the
		 browser cache isn't out of sync with the real data generated by the
		 AJAX event.
		 */
		onload = function() {
			if ( window.location.hash.substr( '#refresh' ) ) {
				refreshData();
			}
		};

		$( '#jp-contain' ).tabs();

		// Hide the successful connection message after a little bit
		setTimeout( function(){
			jQuery( '.jetpack-message:not( .stay-visible, .jetpack-err )' ).hide( 600 );
		}, 6000);
	}

	function loadAllTabs() {
		loadTab( 'Security', 'mod-feature-tab', '#security' );
		loadTab( 'Health', 'mod-feature-tab', '#health' );
		loadTab( 'Traffic', 'mod-feature-tab', '#traffic' );
		loadTab( 'More', 'mod-feature-tab', '#more' );
	}

	/*
	 Load Modules for a template
	 @param string: The module tag you'd like to filter by
	 @param string: The template name
	 @param string: The target element to display the template
	 */
	function loadTab( prop, template, location ) {
		// Mapping prior to sorting improves performance by over 50%
		var html = '',
			result = [],
			val = '',
			i,
			length,
			renderingmodules = [];

		// create the map
		for ( i = 0, length = modules.length; i < length; i++ ) {
			if ( prop === 'More' ) {
				if ( modules[i].feature.indexOf( 'Traffic', 'Security', 'Health' ) !== -1 ) {
					continue;
				} else {
					val = modules[i].name.toLowerCase();
					result.push( {
						index: i,
						value: val,
						order: modules[i].recommendation_order
					});
				}
			}

			if( modules[i].feature.indexOf(prop) !== -1 ) {
				val = modules[i].name.toLowerCase();
				result.push( {
					index: i,
					value: val,
					order: modules[i].recommendation_order
				});
			}
		}

		// Sort modules by recommendation order
		result.sort(function( a, b ) {
			if (a.order === b.order ) {
				return 0;
			}
			return ( a.order < b.order ) ? -1 : 1;
		});

		// copy values in right order
		for ( i = 0, length = result.length; i < length; i++ ) {
			renderingmodules.push( modules[result[i].index] );
			renderingmodules[i].index =  result[i].index; // make sure we set the index to the right order*/
		}

		// Render modules.
		for ( i = 0; i < renderingmodules.length; i++ ) {
			html += wp.template( template )( renderingmodules[i] );
		}

		$( location ).append( html );
	}

	/*
	 Handles the module activation ajax actions
	 */
	function adminAJAX() {
		$( '#jp-contain' ).on( 'keypress click', '.form-toggle', function( e ){
			if ( e.which !== 13 && e.type !== 'click' ) {
				return;
			}
			var thisElementId = e.target.id,
				thisLabel = $( 'label[for="' + thisElementId + '"]' + '.plugin-action__label'),
				index;

			data.action         = 'jetpack_admin_ajax';
			data.thisModuleSlug = thisElementId.replace( 'active-', '' );
			data.toggleModule   = 'nux-toggle-module';

			index = $( '#toggle-' + data.thisModuleSlug ).data( 'index' );
			thisLabel.hide();
			$( '.module-spinner-' + data.thisModuleSlug ).show();

			$.post( jp_data.ajaxurl, data, function ( response ) {
				if ( 0 !== response ) {

					$( '.module-spinner-' + response.module ).hide();

					// This is a hacky way around not showing the config link when activated.
					response.noConfig = _.indexOf( [ 'photon', 'enhanced-distribution' ], response.module );

					// Preserves the modal index so it can be rendered properly after the data has changed
					response.index = index;

					$( '#toggle-' + response.module ).replaceWith( wp.template( 'mod-feature-tab' )( response ) );

					// Refreshes the modal element data
					_.extend( _.findWhere( modules, { module: response.module } ), response );

					// Manual element alteration for Manage, since it's not part of the template
					if ( 'manage' === data.thisModuleSlug ) {
						if ( response.activated ) {
							thisLabel.show().html( 'ACTIVE' );
							$( '#manage-row' ).addClass( 'activated' );
						} else {
							thisLabel.show().html( 'INACTIVE' );
							$( '#manage-row' ).removeClass( 'activated' );
						}

						$( '.manage-cta-inactive' ).toggle();
						$( '.manage-cta-active' ).toggle();
						return;
					}

					window.location.hash = 'refresh';
				}

			}, 'json' );
		});
	}

	/*
	 This function will refresh any data elements that we've
	 changed via AJAX.  Necessary when page is visited via back/forward
	 browsing.
	 */
	function refreshData() {
		// Clean up
		$( '#nux-performance-security, #nux-traffic' ).empty();
		$( '#jump-start-area' ).hide();
		$( '.nux-intro' ).show();

		data.action      = 'jetpack_admin_ajax_refresh';
		data.refreshData = 'refresh';
		$.post( jp_data.ajaxurl, data, function ( response ) {
			modules = _.values( response );
			loadTab( 'Performance-Security', 'mod-feature-tab', '#nux-performance-security' );
			loadTab( 'Traffic', 'mod-feature-tab', '#nux-traffic' );
		}, 'json' );
	}

})( jQuery, jp_data.modules, jp_data.currentVersion, jp_data );
